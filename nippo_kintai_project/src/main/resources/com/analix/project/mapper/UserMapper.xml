<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.analix.project.mapper.UserMapper">
	<resultMap type="com.analix.project.entity.Users" id="users">
		<id column="id" property="Id" />
		<result column="password" property="password" />
		<result column="name" property="name" />
		<result column="role" property="role" />
		<result column="department_id" property="departmentId" />
		<result column="department_name" property="departmentName" />
		<result column="start_Date" property="startDate" />
		<result column="email" property="email" />
		<result column="employee_code" property="employeeCode" />
	</resultMap>

	<select id="findUserDataByEmployeeCode"
		resultType="com.analix.project.entity.Users">
		SELECT
		users.id,
		users.name,
		users.password,
		users.role,
		users.department_id,
		users.start_date,
		users.email,
		users.employee_code,
		department.name AS
		department_name
		FROM users
		INNER JOIN department
		ON
		users.department_id =
		department.department_id
		WHERE users.employee_code
		= #{employeeCode}
	</select>

	<select id="createNewEmployeeCode" resultType="integer">
		SELECT
		max(employee_code) FROM users;

	</select>

	<select id="userExsistByEmployeeCode" resultType="boolean">
		SELECT EXISTS (
		SELECT 1
		FROM users
		WHERE employee_code
		= #{employeeCode}
		);
	</select>

	<update id="updateUserData"
		parameterType="com.analix.project.entity.Users">
		UPDATE users
		SET
		name =
		#{users.name},
		role =
		#{users.role},
		department_id =
		#{users.departmentId},
		start_date =
		#{users.startDate},
		email =
		#{users.email},
		employee_code =
		#{users.employeeCode}
		WHERE
		id =
		#{users.id}
	</update>
	<insert id="insertUserData" useGeneratedKeys="true"
		keyProperty="id" parameterType="com.analix.project.entity.Users">
		INSERT INTO
		users(name,password,role,department_id,start_date,email,employee_code)
		values(#{users.name},#{users.password},#{users.role},#{users.departmentId},#{users.startDate},#{users.email},#{users.employeeCode})
	</insert>

	<delete id="deleteUserData">
		DELETE FROM users
		WHERE id = #{id}
	</delete>

	<select id="findUserListByRole"
		resultType="com.analix.project.entity.Users">
		SELECT
		users.id,
		users.name,
		users.password,
		users.role,
		users.department_id,
		users.start_date,
		users.email,
		users.employee_code
		FROM users
		WHERE users.role
		= #{role}
	</select>

	<select id="findEmailByUserId" resultType="String">
		SELECT
		email
		FROM
		users
		WHERE
		id = #{userId}
	</select>

	<select id="searchForUserNameAndEmployeeCode"
		resultType="com.analix.project.entity.Users">
		SELECT
		id,
		employee_code,
		name
		FROM
		users
		WHERE name
		LIKE
		CONCAT('%',
		#{userKeyword}, '%')
		OR
		employee_code LIKE CONCAT('%',
		#{userKeyword},
		'%')
		ORDER BY
		id ASC


	</select>

	<select id="findUserDataForDisplay"
		resultType="com.analix.project.entity.Users">
		SELECT
		users.id,
		users.name,
		users.employee_code,
		department.name AS
		department_name
		FROM users
		INNER JOIN
		department
		ON
		users.department_id =
		department.department_id
		WHERE users.id =
		#{id}
	</select>

	<insert id="batchInsertUsers"
		parameterType="com.analix.project.entity.Users">
		INSERT INTO
		users(name,password,role,department_id,start_date,email,employee_code)
		values
		<foreach collection="insertList" item="insertList"
			separator=",">
			(#{insertList.name},#{insertList.password},#{insertList.role},#{insertList.departmentId},#{insertList.startDate},#{insertList.email},#{insertList.employeeCode})
		</foreach>
	</insert>

	<update id="batchUpdateUsers"
		parameterType="com.analix.project.entity.Users">
		UPDATE users
		<set>
			name= CASE employee_code
			<foreach collection="updateList" item="update">
				WHEN
				#{update.employeeCode}
				THEN #{update.name}
			</foreach>
			END,
			role = CASE employee_code
			<foreach collection="updateList" item="update">
				WHEN
				#{update.employeeCode}
				THEN #{update.role}
			</foreach>
			END,
			department_id = CASE employee_code
			<foreach collection="updateList" item="update">
				WHEN
				#{update.employeeCode}
				THEN #{update.departmentId}
			</foreach>
			END,
			start_date = CASE employee_code
			<foreach collection="updateList" item="update">
				WHEN
				#{update.employeeCode}
				THEN #{update.startDate}
			</foreach>
			END,
			email = CASE employee_code
			<foreach collection="updateList" item="update">
				WHEN
				#{update.employeeCode}
				THEN #{update.email}
			</foreach>
			END
		</set>
		WHERE employee_code IN
		<foreach collection="updateList" item="update" open="("
			separator="," close=")">
			#{update.employeeCode}
		</foreach>
	</update>



	<select id="findIdByEmployeeCodeAndName"
		resultType="com.analix.project.entity.Users">
		SELECT
		id,
		employee_code
		FROM users
		WHERE
		<foreach collection="usersList" item="user" open="("
			separator=" OR " close=")">
			(employee_code = #{user.employeeCode} AND name
			= #{user.name})
		</foreach>

	</select>

	<select id="findIdByEmployeeCode"
		resultType="com.analix.project.entity.Users">
		SELECT
		id,
		name,
		employee_code
		FROM users
		WHERE employee_code
		IN
		<foreach collection="usersList" item="users" open="("
			separator="," close=")">
			#{users.employeeCode}
		</foreach>
	</select>

	<select id="findIdByName"
		resultType="com.analix.project.entity.Users">
		SELECT
		id,
		name,
		employee_code
		FROM users
		WHERE name
		IN
		<foreach collection="usersList" item="users" open="("
			separator="," close=")">
			#{users.name}
		</foreach>

	</select>


</mapper>