<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.analix.project.mapper.AttendanceCorrectionMapper">

	<!-- 勤怠訂正登録 既存のデータがあれば更新(確認者:null、却下フラグ:0に更新)-->
	<insert id="registAttendanceCorrection" useGeneratedKeys="true"
		keyProperty="id" parameterType="com.analix.project.entity.AttendanceCorrection">
		INSERT INTO attendance_correction
		(user_id, status, date, start_time, end_time, remarks, correction_reason, rejection_reason, application_date, reject_flg)
		VALUES (#{correction.userId}, #{correction.status}, #{correction.date}, #{correction.startTime}, #{correction.endTime}, 
		#{correction.remarks}, #{correction.correctionReason}, #{correction.rejectionReason}, #{correction.applicationDate}, #{correction.rejectFlg})
		ON DUPLICATE KEY UPDATE
		status = #{correction.status}, start_time = #{correction.startTime}, end_time = #{correction.endTime},
		remarks = #{correction.remarks}, correction_reason = #{correction.correctionReason}, rejection_reason = NULL,
		application_date = #{correction.applicationDate}, confirmer = NULL, reject_flg = 0
	</insert>
	
	<!-- 全件取得 -->
	<select id="findAllAttendanceCorrection"
		resultType="com.analix.project.entity.AttendanceCorrection">
		SELECT
		users.name AS user_name,
		ac.id,
		ac.user_id, ac.status, ac.date, ac.start_time, ac.end_time,
		ac.remarks, ac.correction_reason, ac.rejection_reason, ac.application_date, ac.confirmer, ac.reject_flg
		FROM
		attendance_correction ac
		JOIN
		users ON ac.user_id = users.id
	</select>
	
	<!-- 訂正idからデータ（ユーザーId、申請者、対象日付、申請日）取得-->
	<select id="findCorrectionDataById"
		resultType="com.analix.project.dto.AttendanceCorrectionDto">
		SELECT
		users.name AS user_name, ac.user_id, ac.date, ac.application_date
		FROM
		attendance_correction ac
		JOIN
		users ON ac.user_id = users.id
		WHERE
		ac.id = #{id}
	</select>
	
	<!-- userIdとdateを条件に検索して取得-->
	<select id="findAttendanceByUserIdAndDate"
		resultType="com.analix.project.entity.AttendanceCorrection">
		SELECT * FROM attendance_correction
		WHERE user_id = #{userId} AND date = #{date}
	</select>
	
	<!-- 却下リスト取得（ユーザーIDと年月と却下フラグ1を条件に却下された訂正リスト取得）-->
	<select id="findRejectedAttendanceByUserIdAndYearMonth"
		resultType="com.analix.project.entity.AttendanceCorrection">
		SELECT * FROM attendance_correction
		WHERE user_id = #{userId}
		AND DATE_FORMAT(date, '%Y-%m') = #{yearMonth}
		AND reject_flg = 1
		ORDER BY date ASC
	</select>
	
	<!-- 申請中リスト取得（ユーザーIDと年月と却下フラグ0と確認者nullを条件）-->
	<select id="findReqestedCorrectionByUserIdAndYearMonth"
		resultType="com.analix.project.entity.AttendanceCorrection">
		SELECT * FROM attendance_correction
		WHERE user_id = #{userId}
		AND DATE_FORMAT(date, '%Y-%m') = #{yearMonth}
		AND confirmer IS NULL
		AND reject_flg = 0
		ORDER BY date ASC
	</select>
	
	<!-- 訂正申請却下後 -->
	<update id="updateRejectCorrection" parameterType="com.analix.project.form.AttendanceCorrectionForm">
		UPDATE attendance_correction
		SET reject_flg = 1, rejection_reason = #{correctionForm.rejectionReason},
		confirmer = #{correctionForm.confirmer}
		WHERE id = #{correctionForm.id}
	</update>
	
	<!-- 承認申請承認後 -->
	<update id="updateApproveCorrection" parameterType="Map">
		UPDATE attendance_correction
		SET confirmer = #{confirmer}
		WHERE id = #{id}
	</update>
	
	<!-- 却下理由【訂正申請】×ボタン押下(却下フラグ0に更新) -->
	<update id="updateRejectFlg">
		UPDATE attendance_correction
		SET reject_flg = 0
		WHERE id = #{correctionId}
	</update>
	
	<!-- 指定されたページの訂正情報を取得 -->
<!--	<select id="findCorrections"-->
<!--		resultType="com.analix.project.entity.AttendanceCorrection">-->
<!--		SELECT * FROM attendance_correction-->
<!--		WHERE user_id = #{userId}-->
<!--		LIMIT #{limit} OFFSET #{offset}-->
<!--	</select>-->

	<!-- 訂正申請の総件数を取得 -->
<!--	<select id="countCorrections" resultType="Integer">-->
<!--		SELECT COUNT(*) FROM attendance_correction-->
<!--		WHERE user_id = #{userId}-->
<!--	</select>-->

</mapper>