<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.analix.project.mapper.AttendanceMapper">

	<select id="findAllDailyAttendance"
		resultType="com.analix.project.entity.Attendance">
		SELECT *
		FROM
		attendance
		WHERE
		user_id = #{userId}
		AND
		DATE_FORMAT(date, '%Y-%m') =
		#{yearMonth}
	</select>

	<insert id="registDailyAttendance" useGeneratedKeys="true"
		keyProperty="id" parameterType="com.analix.project.entity.Attendance">
		INSERT INTO
		attendance(user_id,status,date,start_time,end_time,remarks)
		values(#{attendance.userId},#{attendance.status},#{attendance.date},#{attendance.startTime},#{attendance.endTime},#{attendance.remarks})
	</insert>


	<update id="updateDailyAttendance"
		parameterType="com.analix.project.entity.Attendance">
		UPDATE attendance
		SET status =
		#{attendance.status},
		start_time =
		#{attendance.startTime},
		end_time =
		#{attendance.endTime},
		remarks =
		#{attendance.remarks}

		WHERE
		id = #{attendance.id}
		AND user_id =
		#{attendance.userId}
		AND date =
		#{attendance.date}


	</update>

	<!--承認申請者情報取得 -->
	<select id="findByUserIdAndYearMonth" parameterType="map"
		resultType="com.analix.project.entity.Attendance">
		SELECT id, user_id, date, status, start_time, end_time,
		remarks
		FROM attendance
		WHERE user_id = #{userId}
		AND DATE_FORMAT(date,
		'%Y-%m') = #{targetYearMonth}
	</select>

	<select id="attendanceUnsubmittedPersonList"
		resultType="com.analix.project.entity.Users">
		SELECT users.id,
		users.name,
		users.email,
		users.tel
		FROM users
		LEFT JOIN attendance
		ON
		users.id
		= attendance.user_id AND attendance.date
		= #{today}
		WHERE
		attendance.user_id IS NULL
		AND users.role
		= "Regular"
		OR
		users.role
		="UnitManager";


	</select>

	<insert id="upsertStartTime" useGeneratedKeys="true"
		keyProperty="id" parameterType="com.analix.project.entity.Attendance">
		INSERT INTO attendance (id, user_id,
		status, date, start_time)
		VALUES (#{attendance.id},
		#{attendance.userId}, #{attendance.status},
		#{attendance.date},
		#{attendance.startTime})
		ON DUPLICATE KEY UPDATE
		status =
		#{attendance.status},
		start_time = #{attendance.startTime};

	</insert>

	<update id="updateEndTime"
		parameterType="com.analix.project.entity.Attendance">
		UPDATE attendance
		SET status = #{attendance.status},
		end_time = #{attendance.endTime}
		WHERE user_id = #{attendance.userId}
		AND date = #{attendance.date};
	</update>

	<select id="todaysStartTimeExistCheck" resultType="boolean">
		SELECT EXISTS
		(
		SELECT 1
		FROM attendance
		WHERE user_id = #{userId}
		AND date = #{today}
		AND start_time != ''
		);
	</select>

	<!-- 訂正申請承認後 -->
	<update id="updateAttendanceFromCorrection"
		parameterType="Integer">
		UPDATE attendance a
		JOIN attendance_correction ac
		ON
		a.user_id = ac.user_id
		AND a.date = ac.date
		SET
		a.status = ac.status,
		a.start_time = ac.start_time,
		a.end_time = ac.end_time,
		a.remarks =
		ac.remarks
		WHERE ac.id = #{id}
	</update>

<!-- 勤怠と訂正テーブルを結合して取得（年月/日付） -->
<resultMap id="AttendanceInfoDtoMap" type="com.analix.project.dto.AttendanceInfoDto">
<!-- currentAttendance のマッピング -->
<result property="currentAttendance.date" column="attendanceDate" />
<result property="currentAttendance.status" column="attendanceStatus" />
<result property="currentAttendance.startTime" column="attendanceStartTime" />
<result property="currentAttendance.endTime" column="attendanceEndTime" />
<result property="currentAttendance.remarks" column="attendanceRemarks" />
<!-- correctedAttendance のマッピング -->
<result property="correctedAttendance.date" column="correctionDate" />
<result property="correctedAttendance.status" column="correctionStatus" />
<result property="correctedAttendance.startTime" column="correctionStartTime" />
<result property="correctedAttendance.endTime" column="correctionEndTime" />
<result property="correctedAttendance.remarks" column="correctionRemarks" />
<result property="correctionRejectionReason" column="correctionRejectionReason" />
<result property="correctionReason" column="correctionReason" />
<result property="correctionConfirmer" column="correctionConfirmer" />
<result property="correctionId" column="correctionId" />
</resultMap>
<select id="findAttendanceWithCorrectons" resultMap="AttendanceInfoDtoMap">
    	SELECT 
    	a.date AS attendanceDate,
        a.status AS attendanceStatus,
        a.start_time AS attendanceStartTime,
       	a.end_time AS attendanceEndTime,
       	a.remarks AS attendanceRemarks,
		ac.date AS correctionDate,
        ac.status AS correctionStatus,
        ac.start_time AS correctionStartTime,
        ac.end_time AS correctionEndTime,
        ac.remarks AS correctionRemarks,
        ac.rejection_reason AS correctionRejectionReason,
        ac.correction_reason AS correctionReason,
        ac.confirmer AS correctionConfirmer,
        ac.id AS correctionId
    	FROM attendance a
   	 	LEFT JOIN attendance_correction ac
    	ON a.user_id = ac.user_id
    	AND a.date = ac.date
   		WHERE
        a.user_id = #{userId}
<if test="targetDate != null">
        AND a.date = #{targetDate}
</if>
<if test="targetYearMonth != null">
        AND DATE_FORMAT(a.date, '%Y-%m') = #{targetYearMonth}
</if>
</select>

	<!-- 帳票出力 -->
	<select id="daysTimeRetrieveByStatus" resultType="hashmap">
		SELECT
		status,
		SUM(
		CASE 
		WHEN 480 > TIMESTAMPDIFF(MINUTE, start_time,
		end_time) THEN TIMESTAMPDIFF(MINUTE, start_time,
		end_time)
		ELSE
		TIMESTAMPDIFF(MINUTE, start_time,
		end_time)-60 
		END
		) AS totalTimeMinutes,
		COUNT(*) AS totalDays
		FROM
		attendance
		WHERE
		user_id = #{userId}
		AND
		DATE_FORMAT(date, '%Y-%m') = #{targetYearMonth}
		GROUP BY
		status
		ORDER BY
		status
	</select>

	<select id="everyWeekOvertimeHoursRetrieve" resultType="hashmap">
		SELECT
		YEARWEEK(date, 1) AS week,
		SUM(
		CASE
		WHEN TIMESTAMPDIFF(MINUTE, start_time, end_time) > 480 THEN TIMESTAMPDIFF(MINUTE, start_time,
		end_time) - 480 - 60
		ELSE 0
		END
		) AS overtimeMinutes
		FROM
		attendance
		WHERE
		user_id =
		#{userId}
		AND
		DATE_FORMAT(date, '%Y-%m') = #{targetYearMonth}
		GROUP BY
		YEARWEEK(date, 1)
	</select>
	
	<!--日報勤怠取得-->
	<resultMap id="attendanceReportMap" type="com.analix.project.dto.AttendanceReportDto">
		<result property="date" column="date" />
		<result property="status" column="status" />
		<result property="startTime" column="start_time" />
		<result property="endTime" column="end_time" />

		<collection property="dailyReportDetailDtoList"
			ofType="com.analix.project.dto.DailyReportDetailDto">
				<result property="workName" column="work_name" />
				<result property="time" column="time" />
				<result property="content" column="content" />
		</collection>
	</resultMap>
	
	<select id="findAttendanceReport" resultMap="attendanceReportMap">
		SELECT
		attendance.date,
		attendance.status,
		attendance.start_time,
		attendance.end_time,
		work.work_name,
		daily_report_detail.time,
		daily_report_detail.content
		
		FROM attendance
		LEFT JOIN daily_report_detail
		ON attendance.user_id = daily_report_detail.user_id
		AND attendance.date = daily_report_detail.date
		
		LEFT JOIN work
		ON daily_report_detail.work_id = work.work_id
		
		WHERE
		attendance.user_id = #{userId}
		AND DATE_FORMAT(attendance.date, '%Y-%m') = #{targetYearMonth}
	</select>

</mapper>